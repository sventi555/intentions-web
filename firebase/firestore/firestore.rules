rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function existsIn(collection, id) {
      return exists(/databases/$(database)/documents/$(collection)/$(id));
    }

    function getIn(collection, id) {
      return get(/databases/$(database)/documents/$(collection)/$(id));
    }

    function isFollowing(user1Id, user2Id) {
      return (
        existsIn(/follows, /$(user2Id)/from/$(user1Id)) &&
        getIn(/follows, /$(user2Id)/from/$(user1Id)).data.status == 'accepted'
      );
    }

    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }

    match /usernames/{username} {
      allow read: if true;
    }

    match /users/{id} {
      allow read: if true;
    }

    match /users/{userId}/feed/{postId} {
      allow read: if request.auth != null && request.auth.uid == userId;
    }

    match /users/{userId}/notifications/{notificationId} {
      allow read: if request.auth != null && request.auth.uid == userId;
    }

    match /follows/{toUserId}/from/{fromUserId} {
      function includesMe() {
        return request.auth != null && (fromUserId == request.auth.uid || toUserId == request.auth.uid);
      }

      function belongsToFollowed() {
        return request.auth != null && (
          isFollowing(request.auth.uid, fromUserId) || isFollowing(request.auth.uid, toUserId)
        );
      }

      allow read: if (
        includesMe() ||
        (resource.data.status == 'accepted' && belongsToFollowed())
      );
    }

    match /intentions/{id} {
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.userId;
      }

      function followsOwner() {
        return request.auth != null && isFollowing(request.auth.uid, resource.data.userId);
      }

      allow read: if (isOwner() || followsOwner());
    }

    match /posts/{id} {
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.userId;
      }

      function followsOwner() {
        return request.auth != null && isFollowing(request.auth.uid, resource.data.userId);
      }

      allow read: if (isOwner() || followsOwner());
    }
  }
}
